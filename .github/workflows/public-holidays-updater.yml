name: Update Luxembourg Public Holidays

on:
  schedule:
    - cron: "0 0 1 1 *" # Runs yearly on January 1st at midnight
  workflow_dispatch: # Allow manual triggering

jobs:
  update-holidays:
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install icalendar

      - name: Create holiday update script
        run: |
          cat << 'EOF' > update_holidays.py
          import os
          from datetime import date, timedelta
          from icalendar import Calendar, Event

          def calculate_easter(year):
              a = year % 19
              b = year // 100
              c = year % 100
              d = b // 4
              e = b % 4
              f = (b + 8) // 25
              g = (b - f + 1) // 3
              h = (19 * a + b - d - g + 15) % 30
              i = c // 4
              k = c % 4
              l = (32 + 2 * e + 2 * i - h - k) % 7
              m = (a + 11 * h + 22 * l) // 451
              month = (h + l - 7 * m + 114) // 31
              day = (h + l - 7 * m + 114) % 31 + 1
              return date(year, month, day)

          fixed_holidays = [
              {"month": 1, "day": 1, "summary": "New Year's Day"},
              {"month": 5, "day": 1, "summary": "Labour Day"},
              {"month": 6, "day": 9, "summary": "Europe Day"},
              {"month": 6, "day": 23, "summary": "National Day"},
              {"month": 8, "day": 15, "summary": "Assumption Day"},
              {"month": 11, "day": 1, "summary": "All Saints Day"},
              {"month": 12, "day": 25, "summary": "Christmas Day"},
              {"month": 12, "day": 26, "summary": "Boxing Day"},
          ]

          calendar_path = "public-holidays.ics"
          if os.path.exists(calendar_path):
              with open(calendar_path, "rb") as f:
                  cal = Calendar.from_ical(f.read())
          else:
              cal = Calendar()
              cal.add("prodid", "-//Luxembourg Public Holidays//EN")
              cal.add("version", "2.0")

          def event_exists(cal, event_date, summary):
              for component in cal.walk("VEVENT"):
                  if component.get("dtstart") == event_date and component.get("summary") == summary:
                      return True
              return False

          years_to_add = int(os.getenv("YEARS_TO_ADD", 10))
          current_year = date.today().year
          for year in range(current_year, current_year + years_to_add):
              for holiday in fixed_holidays:
                  event_date = date(year, holiday["month"], holiday["day"])
                  if not event_exists(cal, event_date, holiday["summary"]):
                      event = Event()
                      event.add("dtstart", event_date)
                      event.add("summary", holiday["summary"])
                      event.add("rrule", {"freq": "yearly"})
                      cal.add_component(event)

              easter = calculate_easter(year)
              sliding_holidays = [
                  {"date": easter, "summary": "Easter"},
                  {"date": easter + timedelta(days=1), "summary": "Easter Monday"},
                  {"date": easter + timedelta(days=39), "summary": "Ascension Day"},
                  {"date": easter + timedelta(days=50), "summary": "Whit Monday"},
              ]
              for holiday in sliding_holidays:
                  if not event_exists(cal, holiday["date"], holiday["summary"]):
                      event = Event()
                      event.add("dtstart", holiday["date"])
                      event.add("summary", holiday["summary"])
                      cal.add_component(event)

          with open(calendar_path, "wb") as f:
              f.write(cal.to_ical())
          EOF

      - name: Run holiday update script
        env:
          YEARS_TO_ADD: 10
        run: python update_holidays.py

      - name: Cleanup generated python script
        run: |
          rm -f update_holidays.py

      # Commit the changed file(s) back to the repository
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Commit message for the created commit.
          # Defaults to "Apply automatic changes"
          commit_message: Automated update of Luxembourg public holidays
          commit_user_email: actions@github.com
          commit_author: Github actions <actions@github.com>
